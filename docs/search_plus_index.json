{"./":{"url":"./","title":"Summary","keywords":"","body":"Introduction A blog for recording front-end technology. "},"server/Server.html":{"url":"server/Server.html","title":"服务器","keywords":"","body":"服务器 服务器作为开发环节的重要一环，本章用于讲解与前端开发相关的部分服务器知识。 由于 Centos8 已于 2021 年正式停止维护，故本文所述例子均采用 Alibaba Cloud Linux 3.21.04 为基准，其操作方式与 Centos 基本相同。 "},"server/Nginx.html":{"url":"server/Nginx.html","title":"Nginx","keywords":"","body":"Nginx Nginx (engine x) 是一个高性能的 HTTP 和反向代理 web 服务器，同时也提供了 IMAP/POP3/SMTP 服务。 安装 Nginx 服务器 此处使用 yum 指令安装 Nginx 服务器。 yum install -y nginx 启动 Nginx 服务器 安装后的 Nginx 没有启动，先启动 Nginx 服务器。 nginx 此时，访问 http:// 可以看到 Nginx 的测试页面 如果无法访问，请重试用 nginx -s reload 命令重启 Nginx 配置静态服务器访问路径 外网用户访问服务器的 Web 服务由 Nginx 提供，Nginx 需要配置静态资源的路径信息才能通过 url 正确访问到服务器上的静态资源。 打开 Nginx 的默认配置文件 /etc/nginx/nginx.conf ，修改 Nginx 配置。 若使用 vscode ssh-remote 之类的插件，可以直接按目录进行访问。 vi /etc/nginx/nginx.conf 将默认的 /usr/share/nginx/html 更改为自己所需的路径即可。最后再重启 Nginx 让新的配置生效： nginx -s reload Nginx 配置文件基本信息 main # 全局设置 events { # Nginx工作模式 .... } http { # http设置 .... upstream myproject { # 负载均衡服务器设置 ..... } server { # 主机设置 listen 80; # 用于指定虚拟主机的服务端口。 server_name localhost www.example.com; # 用来指定IP地址或者域名，多个域名之间用空格分开。 root /www/wwwroot/www.example.com; # 全局定义，表示在该server下web的根目录，注意要和locate {}下面定义的区分开来。 index index.php index.html index.htm; # 全局定义访问的默认首页地址。 charset utf-8; # 设置网页的默认编码格式。 access_log logs/host.access.log main; # 用来指定此虚拟主机的访问日志存放路径，输出格式为main。 error_log logs/host.error.log error; # 错误日志存放路径，输出格式为error。 error_page 404 /404.html; # 状态码为404时的时候的网页地址,还可定义500,502之类的 .... location / { # 简单例子，匹配所有请求 root /home/www/html; index index.php index.html index.htm; # vue-router、react-router等路由框架要开启history模式可以选择的nginx配置的例子 try_files $uri $uri/ /index.html; } location /api { # 请求代理 proxy_pass } } # Settings for a TLS enabled server. server { # 服务器端口使用443，开启ssl listen 443 ssl http2 default_server; listen [::]:443 ssl http2 default_server; # 输入你的域名 server_name nsuedu.cn; # 修改静态文件的路径 root /data/www; # ssl证书配置 # 修改证书路径一 ssl_certificate \".pem\"; # 修改证书路径二 ssl_certificate_key \".key\"; ssl_session_cache shared:SSL:1m; ssl_session_timeout 10m; #缓存有效期 ssl_ciphers HIGH:!aNULL:!MD5; #加密算法 ssl_prefer_server_ciphers on; #使用服务器端的首选算法 # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } } } 负载均衡配置： weight 轮询(默认)。每个请求按时间顺序逐一分配到不同的后端服务器，如果后端某台服务器宕机，故障系统被自动剔除，使用户访问不受影响，weight 可以指定轮询权值，weight 越大，分配到的访问机率越高，主要用于后端每个服务器性能不均的情况下。 ip_hash，每个请求按访问 IP 的 hash 结果分配，这样来自同一个 IP 的访客固定访问一个后端服务器，有效解决了动态网页存在的 session 共享问题。 fair(第三方)，比上面两个更加智能的负载均衡算法。此种算法可以依据页面大小和加载时间长短智能地进行负载均衡，也就是根据后端服务器的响应时间来分配请求，响应时间短的优先分配。Nginx 本身是不支持 fair 的，如果需要使用这种调度算法，必须下载 Nginx 的 upstream_fair 模块。 url_hash(第三方)。按访问 url 的 hash 结果来分配请求，使每个 url 定向到同一个后端服务器，可以进一步提高后端缓存服务器的效率。Nginx 本身是不支持 url_hash 的，如果需要使用这种调度算法，必须安装 Nginx 的 hash 软件包 "},"server/Docker.html":{"url":"server/Docker.html","title":"Docker","keywords":"","body":"Docker Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux 或 Windows 机器上 Docker 与虚拟机的区别 Docker 是一个容器，它基于 Linux 内核实现 Docker 体积更小:容器运行的是不完整的操作系统（尽管它们可以），虚拟机必须运行完整的操作系统 Docker 启动速度更快:虚拟机启动需要数分钟，而 Docker 容器可以在数毫秒内启动 用途/作用 虚拟机更擅长于彻底隔离整个运行环境,虚拟机更擅长于彻底隔离整个运行环境。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。Docker 通常用于隔离不同的应用，例如前端，后端以及数据库。 安装和配置 Docker 在开始安装之前，需要安装 device-mapper-persistent-data 和 lvm2 两个依赖。 device-mapper-persistent-data 是 Linux 下的一个存储驱动， Linux 上的高级存储技术。 lvm 的作用则是创建逻辑磁盘分区。 yum install -y yum-utils device-mapper-persistent-data lvm2 依赖安装完毕后，我们将阿里云的 Docker 镜像源添加进去。可以加速 Docker 的安装。 sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo yum install docker-ce -y 安装 Docker 时可能出现如下的报错信息： Errors during downloading metadata for repository 'docker-ce-stable': Status code: 404 for https://mirrors.aliyun.com/docker-ce/linux/centos/3/x86_64/stable/repodata/repomd.xml (IP: 39.96.118.196) Error: Failed to download metadata for repo 'docker-ce-stable': Cannot download repomd.xml: Cannot download repodata/repomd.xml: All mirrors were tried 此时我们需要对 docker-ce.repo 进行部分修改，即将 $releasever 变量全部替换为 7。 启动 Docker 服务 sudo systemctl enable docker // 设置开机自启 sudo systemctl start docker // 启动docker Docker 内配置 Nginx docker container run -d -p 4030:80 --rm --name mynginx nginx 上面命令的各个参数含义如下: -d：在后台运行 -p ：容器的 80 端口映射到 127.0.0.1:4030 --rm：容器停止运行后，自动删除容器文件 --name：容器的名字为 mynginx 末尾的 nginx：表示根据 nginx 镜像运行容器。 要修改 Nginx 的配置文件，首先需要进入 Nginx 容器里面，使用下面的命令进入容器里面 docker exec -it nginx /bin/bash 上面命令的解释说明： -it：表示分配一个伪终端。 nginx：表示容器的名称，这里也可以使用容器 ID。 /bin/bash：表示对容器执行 bash 操作。 然后，把这个容器终止，由于--rm 参数的作用，容器文件会自动删除。 docker container stop mynginx "},"server/Jenkins.html":{"url":"server/Jenkins.html","title":"Jenkins","keywords":"","body":"Jenkins Jenkins 是一个基于 Java 语言开发的持续构建工具平台，主要用于持续、自动的构建/测试你的软件和项目。它可以执行你预先设定好的设置和构建脚本，也可以和 Git 代码库做集成，实现自动触发和定时触发构建。 安装 OpenJDK 因为 Jenkins 是 Java 编写的持续构建平台，因此需要安装 Java。在这里，我们选择安装开源的 openjdk 。在这我们直接使用 yum 包管理器安装 openjdk 即可。 yum install -y java 安装 Jenkins 下载 Jenkins 到 /data 目录，此处使用清华镜像源，建议替换为可使用的版本： cd /data wget https://mirrors.tuna.tsinghua.edu.cn/jenkins/redhat-stable/jenkins-2.332.3-1.1.noarch.rpm sudo yum install jenkins-2.332.3-1.1.noarch.rpm 启动 Jenkins Jenkins 安装后，会将启动命令注册到系统 Service 命令中。所以我们直接使用系统 service 命令启动 Jenkins 即可。 在这里，有三个命令可以使用，分别对应启动、重启、停止 三个命令。 service jenkins start # service jenkins restart restart 重启 Jenkins # service jenkins restart stop 停止 Jenkins 初始化 Jenkins 配置 Jenkins 服务启动后将部署到 8080 端口，可以通过浏览器进行服务访问。 解锁 Jenkins 在 Jenkins 启动完成后，会自动跳转至这个界面。这是 Jenkins 的解锁界面，你需要输入存放在服务器的初始解锁密码才能进行下一步操作。 Jenkins 启动后，会生成一个初始密码。该密码在服务器的文件内存放，我们可以进入服务器查看密码内容，将密码填写在 Jenkins 的管理员密码输入框内： 输入密码并且点击“继续”按钮后即可解锁 Jenkins。 下载插件 解锁后就来到了插件下载页面，这一步要下载一些 Jenkins 的功能插件。 因为 Jenkins 插件服务器在国外，所以速度不太理想。我们需要更换为清华大学的 Jenkins 插件源后，再安装插件，所以先不要点安装插件。 更换方法很简单。进入服务器，将 /var/lib/jenkins/updates/default.json 内的插件源地址替换成清华大学的源地址，将 google 替换为 baidu 即可。 sed -i 's/http:\\/\\/updates.jenkins-ci.org\\/download/https:\\/\\/mirrors.tuna.tsinghua.edu.cn\\/jenkins/g' /var/lib/jenkins/updates/default.json && sed -i 's/http:\\/\\/www.google.com/https:\\/\\/www.baidu.com/g' /var/lib/jenkins/updates/default.json 接着点击“安装推荐的插件”即可，稍等一会插件安装完毕。 完成安装 插件安装完毕后，接着是注册管理员账号。 注册结束后看见该页面说明已经安装完成。 测试安装 到这里，我们的 Jenkins 算是启动成功了。但是，我们还需要对 Jenkins 做一点点简单的配置，才可以让它可以构建 docker 镜像。 我们可以在首页点击左侧导航栏的新建 Item，输入任务名并选择 Freestyle project 以创建一个任务。 新建完毕后，找到“构建”一项，选择“增加构建步骤”，选择“执行 shell”，输入以下命令: docker -v docker pull node:latest 该命令会去拉取一个 nodejs 稳定版的镜像，我们可以来测试 Docker 的可用性。 保存后，我们点击“立即构建”后，Jenkins 就会开始构建。 选择左侧历史记录第一项（最新的一项），点击控制台输出，查看构建日志,执行后，我们发现提示无访问权限。这是由于在 Linux 中， Unix socket 属于 root 用户，因此需要 root 权限才能访问。 在 docker 中， docker 提供了一个用户组的概念。我们可以将执行 Shell 的用户添加到名称为 docker 的用户组，则可以正常执行 docker 命令。而在 Jenkins 中执行的终端用户做 jenkins ，所以我们只需要将 jenkins 加入到 docker 用户组即可。 sudo groupadd docker #新增docker用户组 sudo gpasswd -a jenkins docker #将当前用户添加至docker用户组 newgrp docker #更新docker用户组 加入后重启Jenkins： sudo service jenkins restart 重启Jenkins后再次执行脚本，此时执行成功： docker 配置 此时我们查看 docker 的镜像 docker images 时可以发现增加了 docker 的 node 镜像，这是我们通过 Jenkins 自动安装的： 进入此 docker 镜像： docker run -it node /bin/bash 进入 docker 镜像后对其进行一定的配置 # 配置淘宝镜像源 npm config set registry https://registry.npm.taobao.org npm get registry # 可能提示已安装，就不用再安装了 npm install yarn -g yarn config set registry http://registry.npm.taobao.org/ yarn config get registry # 退出docker镜像 exit 使用 SSH 协议集成 Git 仓库源 在这步中，我们将使用 Jenkins 集成外部 Git 仓库，实现对真实代码的拉取和构建。 服务器安装 git 使用 yum -y install git 指令安装 git，安装后使用 git --verison 查看是否安装成功。 生成公钥私钥 首先，我们先来配置公钥和私钥。这是 Jenkins 访问 Git 私有库的常用认证方式。我们可以使用 ssh-keygen 命令即可生成公钥私钥。 ssh-keygen -t rsa -C \"269629082@qq.com\" 执行后，会遇到第一步骤：Enter file in which to save the key 。这一步是询问你要将公钥私钥文件放在哪里。默认是放在 ~/.ssh/id_rsa 下，当然也可以选择输入你自己的路径。结束后，你会得到两个文件。分别是 id_rsa 和 id_rsa.pub。其中，id_rsa 是私钥文件，id_rsa.pub 是对应的公钥文件。我们需要在 Git 端配置公钥，在 Jenkins 端使用私钥与 Git 进行身份校验。 在 Gitee 中配置公钥 在 Gitee 中添加 SSH 公钥，其中的公钥为刚才生成的 id_rsa.pub 文件，可以使用 cat ~/.ssh/id_rsa.pub 进行查看。 在 Jenkins 配置私钥 在 Jenkins 中，私钥/密码等认证信息都是以“凭证”的方式管理的，所以可以做到全局都通用。我们可以在配置任务时，来添加一个自己的“凭证”。点击项目的“配置”，依次找到 “源码管理” => “Git” => “Repositories”。 Repository URL 则是我们的仓库地址， SSH 地址格式为 git@gitee.com:xxx/xxx.git。 Credentials 是我们选择认证凭证的地方。我们可以点击右侧 “添加” => “Jenkins” 按钮添加一条新的凭证认证信息。点击后会打开一个弹窗，这是 Jenkins 添加凭证的弹窗。选择类型中的 SSH Username with private key 这一项。接着填写信息即可： ID：这条认证凭证在 Jenkins 中的名称是什么 描述：描述信息 Username：用户名（邮箱） Private Key：这里则是我们填写私钥的地方 在命令行窗口，查看私钥文件内容，并复制它 cat ~/.ssh/id_rsa。点击 Add 按钮，将私钥文件内所有文件内容全部复制过去（包含开头的 BEGIN OPENSSH PRIVATE KEY 和结尾的 END OPENSSH PRIVATE KEY）接着点击添加按钮，保存凭证。 选择凭证后若无其他提示则说明身份校验成功。 "}}